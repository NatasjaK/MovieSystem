// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MovieSystem.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    partial class MovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieSystem.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PersonId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Explore futuristic worlds, advanced technology, and the impact of scientific advancements on society and humanity.",
                            Title = "Science Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Immerse yourself in magical realms, mythical creatures, and epic adventures beyond the boundaries of reality.",
                            Title = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Solve puzzles, unravel enigmatic plots, and uncover hidden secrets in thrilling and suspenseful narratives.",
                            Title = "Mystery"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Experience the passion, love, and emotional rollercoaster of relationships and romantic encounters.",
                            Title = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Face your deepest fears as you confront supernatural entities, psychological terrors, and the darkest aspects of human nature.",
                            Title = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Embark on daring quests, explore uncharted territories, and engage in thrilling escapades across various landscapes.",
                            Title = "Adventure"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Travel through time and delve into the past, experiencing historical events and periods through the eyes of fictional characters.",
                            Title = "Historical Fiction"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Experience suspense, tension, and high-stakes situations in fast-paced narratives that keep you on the edge of your seat.",
                            Title = "Thriller"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Find humor in everyday situations, witty dialogues, and humorous characters that make you laugh out loud.",
                            Title = "Comedy"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Explore complex emotions, interpersonal relationships, and the human condition in emotionally charged and thought-provoking stories.",
                            Title = "Drama"
                        });
                });

            modelBuilder.Entity("MovieSystem.Models.LikedGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Movie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("PersonId");

                    b.ToTable("LikedGenres");
                });

            modelBuilder.Entity("MovieSystem.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("MovieSystem.Models.Genre", b =>
                {
                    b.HasOne("MovieSystem.Models.Genre", null)
                        .WithMany("LikedGenres")
                        .HasForeignKey("GenreId");

                    b.HasOne("MovieSystem.Models.Person", null)
                        .WithMany("Genres")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("MovieSystem.Models.LikedGenre", b =>
                {
                    b.HasOne("MovieSystem.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieSystem.Models.Person", "Person")
                        .WithMany("LikedGenre")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieSystem.Models.Genre", b =>
                {
                    b.Navigation("LikedGenres");
                });

            modelBuilder.Entity("MovieSystem.Models.Person", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("LikedGenre");
                });
#pragma warning restore 612, 618
        }
    }
}
